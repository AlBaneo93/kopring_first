apiVersion : v1
kind :       Namespace
metadata :
  name : kopring-ns
---
# nginx configuration
apiVersion : v1
kind :       ConfigMap
metadata :
  name :      nginx-conf
  namespace : kopring-ns
data :
  nginx.conf : |
               user nginx;
               worker_processes auto;
               
               error_log /var/log/nginx/error.log warn;
               pid /var/run/nginx.pid;
               
               events {
               worker_connections 1024;
               }
               
               http {
                   include /etc/nginx/mime.types;
                   default_type application/json;
               
                   log_format main '$remote_addr - $remote_user [$time_local] "$request"'
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
               
                   access_log /var/log/nginx/access.log main;
               
                   sendfile on;
               
                   keepalive_timeout 65;
               
                   upstream backend {
                       server back-service:8080;
                   }
               
                   server {
                       listen 80;
                       listen [::]:80;
               
                       location / {
                           proxy_pass http://backend;
                           proxy_set_header Host $http_host;
                           proxy_set_header X-Real-IP $remote_addr;
                           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                           # return https://$host$request_uri;
                       }
               
                       location /robots.txt {
                           return 200 "User-agent: *\nDisallow: /";
                       }
                   }
               }
---
apiVersion : v1
kind :       Service
metadata :
  name :      nginx-service
  labels :
    app : kopring
  namespace : kopring-ns
spec :
  ports :
    - port :       80
      targetPort : 80
      protocol :   TCP
      name :       nginx-port
  selector :
    app : kopring-nginx
  type : NodePort
---
apiVersion : v1
kind :       Service
metadata :
  name :      back-service
  labels :
    app : kopring
  namespace : kopring-ns
spec :
  ports :
    - port :       8080
      targetPort : 8080
      protocol :   TCP
      name :       kopring-port
  selector :
    app : kopring-back
  type : NodePort
---
apiVersion : v1
kind :       Service
metadata :
  name :      redis-service
  labels :
    app : redis
  namespace : kopring-ns
spec :
  ports :
    - port :       6379
      targetPort : 6379
      protocol :   TCP
      name :       redis-port
  selector :
    app : redis
  type : NodePort
---
apiVersion : v1
kind :       Service
metadata :
  name :      mysql-service
  labels :
    app : mysql
  namespace : kopring-ns
spec :
  ports :
    - port :       3306
      targetPort : 3306
      protocol :   TCP
      name :       msyql-port
  selector :
    app : mysql
  type : NodePort
---
# nginx
apiVersion : apps/v1
kind :       Deployment
metadata :
  name :      kopring-nginx
  labels :
    app : kopring-nginx
  namespace : kopring-ns
spec :
  selector :
    matchLabels :
      app : kopring-nginx
  template :
    metadata :
      labels :
        app : kopring-nginx
    spec :
      containers :
        - name :            nginx
          imagePullPolicy : IfNotPresent
          image :           nginx
          ports :
            - containerPort : 80
          volumeMounts :
            - mountPath : /etc/nginx/nginx.conf
              name :      nginx-config-cm
              subPath :   nginx.conf
      volumes :
        - configMap :
            name : nginx-conf # configmap의 이름
          name : nginx-config-cm # volume Mounts에서 참조할 이름 (e.g. alias)
---
# spring
apiVersion : apps/v1
kind :       Deployment
metadata :
  name :      kopring-back-deployment
  labels :
    app : kopring-back
  namespace : kopring-ns
spec :
  selector :
    matchLabels :
      app : kopring-back
  template :
    metadata :
      labels :
        app : kopring-back
    spec :
      restartPolicy : Always
      containers :
        - name :            kopring
          image :           albaneo0724/kopring-back
          ports :
            - containerPort : 8080
          imagePullPolicy : Always
          env :
            - name :  SPRING_DATASOURCE_URL
              value : "jdbc:mysql://mysql-service:3306/kopringdb"
---
# mysql
apiVersion : apps/v1
kind :       Deployment
metadata :
  name :      mysql-deployment
  labels :
    app : mysql
  namespace : kopring-ns
spec :
  replicas : 1
  selector :
    matchLabels :
      app : mysql
  template :
    metadata :
      labels :
        app : mysql
    spec :
      hostname : mysql-host
      containers :
        - name :  kopring-mysql
          image : mysql
          ports :
            - containerPort : 3306
          env :
            - name :  MYSQL_ROOT_PASSWORD
              value : root
            - name :  MYSQL_DATABASE
              value : kopringdb
---
# redis
apiVersion : apps/v1
kind :       Deployment
metadata :
  name :      redis-deployment
  labels :
    app : redis
  namespace : kopring-ns
spec :
  replicas : 1
  selector :
    matchLabels :
      app : redis
  template :
    metadata :
      labels :
        app : redis
    spec :
      hostname : redis-host
      containers :
        - name :  kopring-redis
          image : redis
          ports :
            - containerPort : 6379

---
# ingress controller
# 모든 서비스를 묶기위한 방법
# Ingress를 정의하는 것은 선언적인 것일뿐 실제로는 아무런 일도 일어나지 않는다.
apiVersion : networking.k8s.io/v1
kind :       Ingress
metadata :
  namespace: kopring-ns
  name : kopring-ingress
  annotations :
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target : /
spec :
  ingressClassName : nginx-ingress
  rules :
    - host: albaneo.iptime.org
    - http :
        paths :
          - path :     /
            backend :
              service :
                name : kopring-service
                port :
                  number : 80
            pathType : Prefix

---
# ingress controller's service
# ingress를 endpoint로 사용하기 위한 서비스
apiVersion : v1
kind :       Service
metadata :
  name :      ingress-service
  labels :
    app.kubernetes.io/name : kopring-ingress
    app.kubernetes.io/part-of : kopring-ingress
  namespace : kopring-ns
spec :
  type: LoadBalancer
  ports :
    - port :       80
      targetPort : 80
      protocol :   TCP
  selector :
    app.kubernetes.io/name: kopring-ingress
    app.kubernetes.io/part-of: kopring-ingress
